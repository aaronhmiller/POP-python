name: Chainguarded Python Security Scan Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Grype
      run: |
        echo "üîß Installing Grype scanner..."
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Scan Chainguarded Python image with Grype
      id: grype-scan
      run: |
        echo "üîç Scanning Chainguarded Python image for vulnerabilities..."
        
        # Function to show progress
        show_progress() {
          local elapsed=0
          while kill -0 $1 2>/dev/null; do
            sleep 3
            elapsed=$((elapsed + 3))
            echo "Still scanning...$elapsed seconds"
          done
        }
        
        # Run Grype scan in background with progress indicator
        grype cgr.dev/chainguard/python --show-suppressed --output json > grype-results.json &
        GRYPE_PID=$!
        show_progress $GRYPE_PID
        wait $GRYPE_PID
        
        # Generate table output
        grype cgr.dev/chainguard/python --show-suppressed --output table > grype-table.txt
        
        # Display table output for visibility
        echo "üìã Grype scan results:"
        cat grype-table.txt
        
        # Count CRITICAL vulnerabilities
        CRITICAL_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-results.json)
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        # Count HIGH vulnerabilities  
        HIGH_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' grype-results.json)
        echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
        
        # Count MEDIUM vulnerabilities  
        MEDIUM_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length' grype-results.json)
        echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT

        # Count LOW vulnerabilities  
        LOW_COUNT=$(jq '[.matches[] | select(.vulnerability.severity == "Low")] | length' grype-results.json)
        echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT
        
        echo "Found $CRITICAL_COUNT CRITICAL vulnerabilities"
        echo "Found $HIGH_COUNT HIGH vulnerabilities"
        echo "Found $MEDIUM_COUNT MEDIUM vulnerabilities"
        echo "Found $LOW_COUNT LOW vulnerabilities"
    
    - name: Process scan results
      run: |
        CRITICAL_COUNT=${{ steps.grype-scan.outputs.critical_count }}
        HIGH_COUNT=${{ steps.grype-scan.outputs.high_count }}
        MEDIUM_COUNT=${{ steps.grype-scan.outputs.medium_count }}
        LOW_COUNT=${{ steps.grype-scan.outputs.low_count }}
        
        echo "üîÑ Processing vulnerability scan results..."
        echo "CRITICAL vulnerabilities: $CRITICAL_COUNT"
        echo "HIGH vulnerabilities: $HIGH_COUNT"
        echo "MEDIUM vulnerabilities: $MEDIUM_COUNT"
        echo "LOW vulnerabilities: $LOW_COUNT"
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "üö® Stopping promotion. Criticals found."
          exit 1
        else
          echo "‚úÖ 0 CRITICALS...OK for production, checking for HIGHs..."
          
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "üìù Logging JIRA tickets on $HIGH_COUNT CVEs."
            # Here you would typically integrate with JIRA API
            # Example: curl -X POST your-jira-endpoint with CVE details
          else
            echo "üéâ 0 HIGH CVEs. Nice work! Promoting to production (0 CRITICALS) and not needing to log ANY JIRAs means one thing. PARTY TIME! After the party dies down, go build some more cool features and let's do this again. This is FUN!"
          fi
        fi
    
    - name: Upload Grype results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: grype-scan-results
        path: |
          grype-results.json
          grype-table.txt
        retention-days: 30
    
    - name: Promote to production
      if: steps.grype-scan.outputs.critical_count == '0'
      run: |
        echo "üöÄ Image approved for production deployment!"
        # Add your production deployment steps here
        # Examples:
        # - Push to production registry
        # - Update Kubernetes manifests
        # - Trigger deployment pipeline
